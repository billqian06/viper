import math


class ImagePatch:
    """A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left, lower, right, upper : int
        An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the
        image matching the object_name.
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    best_text_match(option_list: List[str], prefix: str)->str
        Returns the string that best matches the image.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer
        to "What is this?".
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
    """

    def __init__(self, image, left: int = None, lower: int = None, right: int = None, upper: int = None):
        """Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as
        attributes. If no coordinates are provided, the image is left unmodified, and the coordinates are set to the
        dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left, lower, right, upper : int
            An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.
        """
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str) -> List[ImagePatch]:
        """Returns a list of ImagePatch objects matching object_name contained in the crop if any are found.
        Otherwise, returns an empty list.
        Parameters
        ----------
        object_name : str
            the name of the object to be found

        Returns
        -------
        List[ImagePatch]
            a list of ImagePatch objects matching object_name contained in the crop

        Examples
        --------
        >>> # return the foo
        >>> def execute_command(image) -> List[ImagePatch]:
        >>>     image_patch = ImagePatch(image)
        >>>     foo_patches = image_patch.find("foo")
        >>>     return foo_patches
        """
        return find_in_image(self.cropped_image, object_name)

    def exists(self, object_name: str) -> bool:
        """Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both foos and garply bars in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_foo = image_patch.exists("foo")
        >>>     is_garply_bar = image_patch.exists("garply bar")
        >>>     return bool_to_yesno(is_foo and is_garply_bar)
        """
        return len(self.find(object_name)) > 0

    def best_text_match(self, option_list: List[str], prefix: str=None) -> str:
        """Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the foo gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     foo_patches = image_patch.find("foo")
        >>>     # Question assumes one foo patch
        >>>     return foo_patches[0].best_text_match(["gold", "white"])
        """
        return best_text_match(self.cropped_image, option_list, prefix)

    def simple_query(self, question: str = None) -> str:
        """Returns the answer to a basic question asked about the image. If no question is provided, returns the answer
        to "What is this?". The questions are about basic perception, and are not meant to be used for complex reasoning
        or external knowledge.
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # What color is the foo?
        >>> def execute_command(image) -> str:
        >>>     image_patch = ImagePatch(image)
        >>>     foo_patches = image_patch.find("foo")
        >>>     foo_patch = foo_patches[0]
        >>>     return foo_patch.simple_query("What is the color?")

        >>> # Is the second bar from the left quuxy?
        >>> def execute_command(image) -> str:
        >>>     image_patch = ImagePatch(image)
        >>>     bar_patches = image_patch.find("bar")
        >>>     bar_patches.sort(key=lambda x: x.horizontal_center)
        >>>     bar_patch = bar_patches[1]
        >>>     return bar_patch.simple_query("Is the bar quuxy?")
        """
        return simple_query(self.cropped_image, question)

    def crop(self, left: int, lower: int, right: int, upper: int) -> ImagePatch:
        """Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left, lower, right, upper : int
            The (left/lower/right/upper)most pixel of the cropped image.
        -------
        """
        return ImagePatch(self.cropped_image, left, lower, right, upper)

    def overlaps_with(self, left, lower, right, upper):
        """Returns True if a crop with the given coordinates overlaps with this one,
        else False.
        Parameters
        ----------
        left, lower, right, upper : int
            the (left/lower/right/upper) border of the crop to be checked

        Returns
        -------
        bool
            True if a crop with the given coordinates overlaps with this one, else False

        Examples
        --------
        >>> # black foo on top of the qux
        >>> def execute_command(image) -> ImagePatch:
        >>>     image_patch = ImagePatch(image)
        >>>     qux_patches = image_patch.find("qux")
        >>>     qux_patch = qux_patches[0]
        >>>     foo_patches = image_patch.find("black foo")
        >>>     for foo in foo_patches:
        >>>         if foo.vertical_center > qux_patch.vertical_center
        >>>             return foo
        """
        return self.left <= right and self.right >= left and self.lower <= upper and self.upper >= lower


def best_image_match(list_patches: List[ImagePatch], content: List[str], return_index=False) -> Union[ImagePatch, int]:
    """Returns the patch most likely to contain the content.
    Parameters
    ----------
    list_patches : List[ImagePatch]
    content : List[str]
        the object of interest
    return_index : bool
        if True, returns the index of the patch most likely to contain the object

    Returns
    -------
    int
        Patch most likely to contain the object
    """
    return best_image_match(list_patches, content, return_index)


def distance(patch_a: ImagePatch, patch_b: ImagePatch) -> float:
    """
    Returns the distance between the edges of two ImagePatches. If the patches overlap, it returns a negative distance
    corresponding to the negative intersection over union.

    Parameters
    ----------
    patch_a : ImagePatch
    patch_b : ImagePatch

    Examples
    --------
    # Return the qux that is closest to the foo
    >>> def execute_command(image):
    >>>     image_patch = ImagePatch(image)
    >>>     qux_patches = image_patch.find('qux')
    >>>     foo_patches = image_patch.find('foo')
    >>>     foo_patch = foo_patches[0]
    >>>     qux_patches.sort(key=lambda x: distance(x, foo_patch))
    >>>     return qux_patches[0]
    """
    return distance(patch_a, patch_b)


def bool_to_yesno(bool_answer: bool) -> str:
    return "yes" if bool_answer else "no"


def coerce_to_numeric(string):
    """
    This function takes a string as input and returns a float after removing any non-numeric characters.
    If the input string contains a range (e.g. "10-15"), it returns the first value in the range.
    """
    return coerce_to_numeric(string)


class VideoSegment:
    """A Python class containing a set of frames represented as ImagePatch objects, as well as relevant information.
    Attributes
    ----------
    video : torch.Tensor
        A tensor of the original video.
    start : int
        An int describing the starting frame in this video segment with respect to the original video.
    end : int
        An int describing the ending frame in this video segment with respect to the original video.
    num_frames->int
        An int containing the number of frames in the video segment.

    Methods
    -------
    frame_iterator->Iterator[ImagePatch]
    trim(start, end)->VideoSegment
        Returns a new VideoSegment containing a trimmed version of the original video at the [start, end] segment.
    frame_iterator->Iterator[ImagePatch]
        Returns an iterator over the frames in the video segment.
    """

    def __init__(self, video: torch.Tensor, start: int = None, end: int = None, parent_start=0, queues=None):
        """Initializes a VideoSegment object by trimming the video at the given [start, end] times and stores the
        start and end times as attributes. If no times are provided, the video is left unmodified, and the times are
        set to the beginning and end of the video.

        Parameters
        -------
        video : torch.Tensor
            A tensor of the original video.
        start : int
            An int describing the starting frame in this video segment with respect to the original video.
        end : int
            An int describing the ending frame in this video segment with respect to the original video.
        """

        if start is None and end is None:
            self.trimmed_video = video
            self.start = 0
            self.end = video.shape[0]  # duration
        else:
            self.trimmed_video = video[start:end]
            if start is None:
                start = 0
            if end is None:
                end = video.shape[0]
            self.start = start + parent_start
            self.end = end + parent_start

        self.num_frames = self.trimmed_video.shape[0]

    def frame_from_index(self, index) -> ImagePatch:
        """Returns the frame at position 'index', as an ImagePatch object.

        Examples
        -------
        >>> # Is there a foo in the frame bar appears?
        >>> def execute_command(video)->bool:
        >>>     video_segment = VideoSegment(video)
        >>>     for i, frame in enumerate(video_segment.frame_iterator()):
        >>>         if frame.exists("bar"):
        >>>             frame_after = video_segment.frame_from_index(i+1)
        >>>             return frame_after.exists("foo")
        """
        return ImagePatch(self.trimmed_video[index])

    def trim(self, start: Union[int, None] = None, end: Union[int, None] = None) -> VideoSegment:
        """Returns a new VideoSegment containing a trimmed version of the original video at the [start, end]
        segment.

        Parameters
        ----------
        start : Union[int, None]
            An int describing the starting frame in this video segment with respect to the original video.
        end : Union[int, None]
            An int describing the ending frame in this video segment with respect to the original video.

        Examples
        --------
        >>> # Return the second half of the video
        >>> def execute_command(video):
        >>>     video_segment = VideoSegment(video)
        >>>     video_second_half = video_segment.trim(video_segment.num_frames // 2, video_segment.num_frames)
        >>>     return video_second_half
        """
        if start is not None:
            start = max(start, 0)
        if end is not None:
            end = min(end, self.num_frames)

        return VideoSegment(self.trimmed_video, start, end, self.start)

    def select_answer(self, info: dict, question: str, options: List[str]) -> str:
        return select_answer(self.trimmed_video, info, question, options)

    def frame_iterator(self) -> Iterator[ImagePatch]:
        """Returns an iterator over the frames in the video segment.

        Examples
        -------
        >>> # Return the frame when the kid kisses the cat
        >>> def execute_command(video):
        >>>     video_segment = VideoSegment(video)
        >>>     for i, frame in enumerate(video_segment.frame_iterator()):
        >>>         if frame.exists("kid") and frame.exists("cat") and frame.simple_query("Is the kid kissing the cat?") == "yes":
        >>>             return frame
        """
        for i in range(self.num_frames):
            yield self.frame_from_index(i)


# ------------------------------  TASK & RETURN SPEC  ------------------------------
# You MUST return visual evidence (bounding boxes) that ground the query.
#
# Return type: List[Dict]
# Each dict must have keys:
#   - "frame": int                    # local index within this segment (0..num_frames-1)
#   - "label": str                    # object / phrase grounded (e.g., "man", "ball", "red hat")
#   - "bbox": [left, lower, right, upper]  # integers, pixel coords in original frame convention
#   - "score": float                  # confidence or heuristic score in [0,1]
#
# DO NOT call `select_answer`. DO NOT generate a textual answer.
# Only return boxes relevant to the query intent (you may return multiple boxes).
#
# Hints:
# - Use `frame.exists("<noun phrase>")` / `frame.find("<noun phrase>")` to detect.
# - When the query includes temporal cues (e.g., "after", "before", "at the beginning/end"),
#   iterate frames and find the best moment, then return boxes from that frame (or a few adjacent ones).
# - If the query mentions multiple entities (e.g., "man speaking to woman holding a cup"),
#   detect both and choose the best pair by proximity or simple reasoning with `simple_query(...)`.
# - If nothing is found, return an empty list [] (not None).
# ----------------------------------------------------------------------------------

# ------------------------------  EXAMPLES  ----------------------------------------

# Example 1: "where is the video taking place" -> return scene/location boxes (heuristic)
def execute_command(video, possible_answers, query) -> List[Dict]:
    seg = VideoSegment(video)
    boxes = []
    for i, frame in enumerate(seg.frame_iterator()):
        video_location = frame.simple_query("Where is the video taking place?") or ""
        if video_location != "":
            patches = frame.find(video_location)
            for p in patches[:1]:
                boxes.append({"frame": i, **p.to_box(label=video_location, score=0.6)})
    return boxes


# Example 2: "what is the man beside the table holding ... while speaking to the woman"
def execute_command(video, possible_answers, query) -> List[Dict]:
    seg = VideoSegment(video)
    boxes = []
    for i, frame in enumerate(seg.frame_iterator()):
        if frame.exists("man") and frame.exists("woman"):
            man_patches = frame.find("man")
            table_patches = frame.find("table") or [frame]
            woman_patches = frame.find("woman") or [frame]

            table_anchor = table_patches[0]
            man_patches.sort(key=lambda m: distance(m, table_anchor))
            man_patch = man_patches[0]
            boxes.append({"frame": i, **man_patch.to_box(label="man", score=0.9)})

            hand_terms = ["hand"]
            hand_candidates = []
            # 1) search inside the man crop first (most precise)
            for term in hand_terms:
                hand_candidates += man_patch.find(term)
            
            # 2) if none inside, search full frame, then re-rank by overlap/proximity to man
            if not hand_candidates:
                full_candidates = []
                for term in hand_terms:
                    full_candidates += frame.find(term)

                if full_candidates:
                    # prefer overlaps with the man; otherwise smaller distance to the man
                    def hand_key(p):
                        ov = man_patch.overlaps_with(p.left, p.lower, p.right, p.upper)
                        return (0 if ov else 1, distance(p, man_patch))
                    full_candidates.sort(key=hand_key)
                    hand_candidates = full_candidates[:3]
            
            for hand_patch in hand_candidates:
                boxes.append({"frame": i, **hand_patch.to_box(label="hand", score=0.9)})
    return boxes



# Example 3: "how does the kid get the ball at the beginning"
def execute_command(video, possible_answers, query) -> List[Dict]:
    seg = VideoSegment(video)
    boxes = []
    for i, frame in enumerate(seg.frame_iterator()):
        if frame.exists("kid") and frame.exists("ball"):
            for p in frame.find("kid")[:2]:
                boxes.append({"frame": i, **p.to_box(label="kid", score=0.85)})
            for p in frame.find("ball")[:2]:
                boxes.append({"frame": i, **p.to_box(label="ball", score=0.85)})

    return boxes


# ------------------------------ Additional Examples -------------------------------
# Below are a few additional examples where the input is an image.
# Although your function will receive a video and must use the video-based signature,
# remember that each video frame is an image.
# These examples demonstrate how to the API can be used on individual frames.

# chair at the front
def execute_command(image) -> ImagePatch:
    # Return the chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find("chair")
    chair_patches.sort(key=lambda chair: chair.compute_depth())
    chair_patch = chair_patches[0]
    # Remember: return the chair
    return chair_patch


# black car just under stop sign
def execute_command(image) -> ImagePatch:
    # Return the car
    image_patch = ImagePatch(image)
    stop_sign_patches = image_patch.find("stop sign")
    if len(stop_sign_patches) == 0:
        stop_sign_patches = [image_patch]
    stop_sign_patch = stop_sign_patches[0]
    car_patches = image_patch.find("black car")
    car_under_stop = []
    for car in car_patches:
        if car.upper < stop_sign_patch.upper:
            car_under_stop.append(car)
    # Find car that is closest to the stop sign
    car_under_stop.sort(key=lambda car: car.vertical_center - stop_sign_patch.vertical_center)
    # Remember: return the car
    return car_under_stop[0]


# middle kid
def execute_command(image) -> ImagePatch:
    # Return the kid
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find("kid")
    if len(kid_patches) == 0:
        kid_patches = [image_patch]
    kid_patches.sort(key=lambda kid: kid.horizontal_center)
    # Remember: return the kid
    return kid_patches[len(kid_patches) // 2]  # Return the middle kid


# girl in white next to man in left
def execute_command(image) -> ImagePatch:
    # Return the girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find("girl")
    girl_in_white_patches = [g for g in girl_patches if g.verify_property("girl", "white clothing")]
    if len(girl_in_white_patches) == 0:
        girl_in_white_patches = girl_patches
    man_patches = image_patch.find("man")
    man_patches.sort(key=lambda man: man.horizontal_center)
    leftmost_man = man_patches[0]  # First from the left
    girl_in_white_patches.sort(key=lambda girl: distance(girl, leftmost_man))
    girl_patch = girl_in_white_patches[0]
    # Remember: return the girl
    return girl_patch


# cow facing the camera
def execute_command(image) -> ImagePatch:
    # Return the cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find("cow")
    if len(cow_patches) == 0:
        cow_patches = [image_patch]
    cow_patch = best_image_match(list_patches=cow_patches, content=["cow facing the camera"])
    # Remember: return the cow
    return cow_patch


# back
def execute_command(image) -> ImagePatch:
    # Return the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find("person")
    person_patches.sort(key=lambda person: person.compute_depth())
    person_patch = person_patches[-1]
    # Remember: return the person
    return person_patch


# dog to the left of the post who is closest to girl wearing a shirt with text that says "I love you"
def execute_command(image) -> ImagePatch:
    # Return the dog
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find("shirt")
    if len(shirt_patches) == 0:
        shirt_patches = [image_patch]
    shirt_patch = best_image_match(list_patches=shirt_patches, content=["I love you shirt"])
    post_patches = image_patch.find("post")
    post_patches.sort(key=lambda post: distance(post, shirt_patch))
    post_patch = post_patches[0]
    dog_patches = image_patch.find("dog")
    dogs_left_patch = [dog for dog in dog_patches if dog.left < post_patch.left]
    if len(dogs_left_patch) == 0:
        dogs_left_patch = dog_patches
    dogs_left_patch.sort(key=lambda dog: distance(dog, post_patch))
    dog_patch = dogs_left_patch[0]
    # Remember: return the dog
    return dog_patch


# more visible chair
def execute_command(image) -> ImagePatch:
    # Return the chair
    image_patch = ImagePatch(image)
    # Remember: return the chair
    return image_patch.find("chair")[0]


# top left
def execute_command(image) -> ImagePatch:
    # Return the person
    image_patch = ImagePatch(image)
    # Figure out what thing the caption is referring to. We need a subject for every caption
    persons = image_patch.find("person")
    top_all_objects = max([obj.vertical_center for obj in objects])
    # Select objects that are close to the top
    # We do this because the caption is asking first about vertical and then about horizontal
    persons_top = [p for p in persons if distance(p.vertical_center, top_all_objects) < 100]
    if len(persons_top) == 0:
        persons_top = persons
    # And after that, obtain the leftmost object among them
    persons_top.sort(key=lambda obj: obj.horizontal_center)
    person_leftmost = persons_top[0]
    # Remember: return the person
    return person_leftmost


# second to top flower
def execute_command(image) -> ImagePatch:
    # Return the flower
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find("flower")
    flower_patches.sort(key=lambda flower: flower.vertical_center)
    flower_patch = flower_patches[-2]
    # Remember: return the flower
    return flower_patch


# chair to the right near the couch
def execute_command(image)->ImagePatch:
    # Return the chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find("chair")
    if len(chair_patches) == 0:
        chair_patches = [image_patch]
    elif len(chair_patches) == 1:
        return chair_patches[0]
    chair_patches_right = [c for c in chair_patches if c.horizontal_center > image_patch.horizontal_center]
    couch_patches = image_patch.find("couch")
    if len(couch_patches) == 0:
        couch_patches = [image_patch]
    couch_patch = couch_patches[0]
    chair_patches_right.sort(key=lambda c: distance(c, couch_patch))
    chair_patch = chair_patches_right[0]
    # Remember: return the chair
    return chair_patch


# number 17
def execute_command(image) -> ImagePatch:
    # Return the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find("person")
    for patch in person_patches:
        if patch.exists("17"):
            return patch
    # Remember: return the person
    return person_patches[0]


# balloon on the right and second from the bottom
def execute_command(image) -> ImagePatch:
    # Return the balloon
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find("balloon")
    if len(balloon_patches) == 0:
        balloon_patches = [image_patch]
    elif len(balloon_patches) == 1:
        return balloon_patches[0]
    leftmost_coordinate = min([patch.horizontal_center for patch in balloon_patches])
    balloon_patches_right = [patch for patch in balloon_patches if
                             distance(patch.horizontal_center, leftmost_coordinate) < 100]
    if len(balloon_patches_right) == 0:
        balloon_patches_right = balloon_patches
    balloon_patches_right.sort(key=lambda p: p.vertical_center)
    balloon_patch = balloon_patches_right[1]
    # Remember: return the balloon
    return balloon_patch


# lamp on the bottom
def execute_command(image) -> ImagePatch:
    # Return the lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find("lamp")
    lamp_patches.sort(key=lambda lamp: lamp.vertical_center)
    # Remember: return the lamp
    return lamp_patches[0]  # Return the bottommost lamp


# foo to bottom left
def execute_command(image) -> ImagePatch:
    # Return the foo
    image_patch = ImagePatch(image)
    foo_patches = image_patch.find("foo")
    lowermost_coordinate = min([patch.vertical_center for patch in foo_patches])
    foo_patches_bottom = [patch for patch in foo_patches if distance(patch.vertical_center, lowermost_coordinate) < 100]
    if len(foo_patches_bottom) == 0:
        foo_patches_bottom = foo_patches
    elif len(foo_patches_bottom) == 1:
        return foo_patches_bottom[0]
    foo_patches_bottom.sort(key=lambda foo: foo.horizontal_center)
    foo_patch = foo_patches_bottom[0]
    # Remember: return the foo
    return foo_patch


# white and yellow pants
def execute_command(image) -> ImagePatch:
    # Return the person
    image_patch = ImagePatch(image)
    # Clothing always requires returning the person
    person_patches = image_patch.find("person")
    person_patch = best_image_match(person_patches, ["white pants", "yellow pants"])
    # Remember: return the person
    return person_patch


# ------------------------------  TEMPLATE  ----------------------------------------
# The system will replace INSERT_QUERY_HERE and EXTRA_CONTEXT_HERE below.
# Only return a list of box dicts following the schema above.

# INSERT_QUERY_HERE
# Extra context: EXTRA_CONTEXT_HERE
def execute_command(INSERT_TYPE_HERE):